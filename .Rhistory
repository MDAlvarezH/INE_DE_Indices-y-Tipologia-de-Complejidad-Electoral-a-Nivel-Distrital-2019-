library(pacman)
library(dplyr)
p_load(tidyverse,
ggthemes,
ggfortify,
RColorBrewer,
colorRamps,
corrplot,
openxlsx,
readxl,
Hmisc,
cluster,
factoextra,
magrittr,
FactoMineR,
PerformanceAnalytics)
options(scipen=999) # Prevenir notación científica
dto_Variables_originales_PCA_K_means_orange <- read_csv("C:/Users/miguel.alvarez/Google Drive/INE/DERFE/META_Indice Complejidad_2019/Dto/dto_Variables originales_PCA_K-means_orange.csv",
col_types = cols(PC1 = col_double(),
PC2 = col_double(), Dto = col_double(),Silhouette = col_skip()))
#eliminamos los primeros dos renglones
dto_Variables_originales_PCA_K_means_orange <- dto_Variables_originales_PCA_K_means_orange[-c(1,2),]
dto_Variables_originales_PCA_Hierc_Cluster_orange <- read_csv("C:/Users/miguel.alvarez/Google Drive/INE/DERFE/META_Indice Complejidad_2019/Dto/dto_Variables originales_PCA_Hierc Cluster_orange.csv",
col_types = cols(PC1 = col_double(),
PC2 = col_double(), Dto = col_double(),Selected = col_skip()))
dto_Variables_originales_PCA_Hierc_Cluster_orange <- dto_Variables_originales_PCA_Hierc_Cluster_orange[-c(1,2),]
dto_Variables_nuevas_PCA_K_means_orange <- read_csv("C:/Users/miguel.alvarez/Google Drive/INE/DERFE/META_Indice Complejidad_2019/Dto/dto_Variables nuevas_PCA_K-means_orange.csv",
col_types = cols(PC1 = col_double(),
PC2 = col_double(), Dto = col_double(),Silhouette = col_skip()))
dto_Variables_nuevas_PCA_K_means_orange <- dto_Variables_nuevas_PCA_K_means_orange[-c(1,2),]
dto_Variables_nuevas_PCA_Hierc_Cluster_orange <- read_csv("C:/Users/miguel.alvarez/Google Drive/INE/DERFE/META_Indice Complejidad_2019/Dto/dto_Variables nuevas_PCA_Hierc Cluster_orange.csv",
col_types = cols(PC1 = col_double(),
PC2 = col_double(), Dto = col_double(),Selected = col_skip()))
dto_Variables_nuevas_PCA_Hierc_Cluster_orange <- dto_Variables_nuevas_PCA_Hierc_Cluster_orange[-c(1,2),]
datos_dto_orange <- merge(dto_Variables_originales_PCA_K_means_orange,dto_Variables_originales_PCA_Hierc_Cluster_orange,by=c("PC1","PC2","Tipologia 2017","Edo","Dto","Edo_Dto"))
datos_dto_orange <- datos_dto_orange[order(datos_dto_orange$Edo_Dto),] #ordenamos
datos_dto_orange <- merge(datos_dto_orange,dto_Variables_nuevas_PCA_K_means_orange,by=c("Tipologia 2017","Edo","Dto","Edo_Dto"))
datos_dto_orange <- datos_dto_orange[order(datos_dto_orange$Edo_Dto),] #ordenamos
datos_dto_orange <- merge(datos_dto_orange,dto_Variables_nuevas_PCA_Hierc_Cluster_orange,by=c("Tipologia 2017","Edo","Dto","Edo_Dto"))
#eliminamos columnas repetidas
datos_dto_orange <- datos_dto_orange[,-c(12,13)]
datos_dto_orange <- datos_dto_orange[order(datos_dto_orange$Edo_Dto),] #ordenamos
#cambiamos los rownames por la columna Edo_Dto
datos_dto_orange2 <- datos_dto_orange %>%
remove_rownames %>%
column_to_rownames(var="Edo_Dto")
#añadimos nuevamente la columna Edo_Dto
datos_dto_orange2$"Edo_Dto" <- datos_dto_orange$Edo_Dto
#ordenamos las columnas
datos_dto_orange2 <- datos_dto_orange2[c(2,3,1,4,5,6,7,8,9,10,11,12)]
#cambiamos el nombre las columnas
datos_dto_orange2 <- datos_dto_orange2 %>%
rename(
PC1_orig = PC1.x,
PC2_orig = PC2.x,
PC1_nuev = PC1.y,
PC2_nuev = PC2.y,
Cluster.Kmeans_orig = Cluster.x,
Cluster.HC_orig = Cluster.y,
Cluster.Kmeans_nuev = Cluster.x.1,
Cluster.HC_nuev = Cluster.y.1)
Dto_All_variables_ind2019 <- read_excel("C:/Users/miguel.alvarez/Google Drive/INE/DERFE/META_Indice Complejidad_2019/Dto/Dto_All variables_ind2019.xlsx",
col_types = c("blank", "text", "numeric",
"text", "text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
#cambiamos los rownames por la columna Edo_Dto
Dto_All_variables_ind2019_2 <- Dto_All_variables_ind2019 %>%
remove_rownames %>%
column_to_rownames(var="mS#Edo_Dto")
#añadimos nuevamente la columna Edo_Dto
Dto_All_variables_ind2019_2$"Edo_Dto" <- Dto_All_variables_ind2019$"mS#Edo_Dto"
colnames(Dto_All_variables_ind2019_2)
#cambiamos el nombre de las columnas
Dto_All_variables_ind2019_2 <- Dto_All_variables_ind2019_2 %>%
rename(
Estado = "mS#Edo",
Distrito = "mS#Dto",
Tipologia_2017 = "c#Tipologia 2017",
Tiempo_Prom = "C#Tiempo Promedio (Minutos)",
Superficie = "C#Superficie (km2)",
Densidad = "C#Densidad (Ciudadanos en PE por km2)",
Poblacion_menos_18 = "C#Poblacion menos de 18",
Poblacion_mas_60 = "C#Poblacion 60 o mas",
Tasa_crecimiento = "C#Tasa crecimiento PE",
PE_JUL2018 = "C#Padron JUL-18",
PE_FEB2019 = "C#Padron FEB-19",
PE_Loc_Rurales = "D#Padron Localidades Rurales",
Secc_Rurales = "D#Numero secciones rurales",
Participacion_Electoral = "C#Participacion Ciudadana 2018 (presidente)",
Viviendas_Internet = "C#Viviendas con Internet",
Viviendas_Celular = "C#Viviendas con Celular",
Prom_Solic_Equi_MACfijo = "C#Prom Solic-Equip MAC fijo",
Prom_Solic_Equi_MACmovil = "C#Prom Solic-Equip MAC movil",
Dias_disp_CV = "C#Dias prom dispo CV",
Prom_CV_disp = "C#CV disp prom"
)
Dto_All_variables_ind2019 <- read_excel("C:/Users/miguel.alvarez/Google Drive/INE/DERFE/META_Indice Complejidad_2019/Dto/Dto_All variables_ind2019.xlsx",
col_types = c("blank", "text", "numeric",
"text", "text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
#cambiamos los rownames por la columna Edo_Dto
Dto_All_variables_ind2019_2 <- Dto_All_variables_ind2019 %>%
remove_rownames %>%
column_to_rownames(var="mS#Edo_Dto")
Dto_All_variables_ind2019 <- read_excel("C:/Users/miguel.alvarez/Google Drive/INE/DERFE/META_Indice Complejidad_2019/Dto/Dto_All variables_ind2019.xlsx",
col_types = c("blank", "text", "numeric",
"text", "text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
#cambiamos los rownames por la columna Edo_Dto
Dto_All_variables_ind2019_2 <- Dto_All_variables_ind2019 %>%
remove_rownames %>%
column_to_rownames(var="mS#Edo_Dto")
#añadimos nuevamente la columna Edo_Dto
Dto_All_variables_ind2019_2$"Edo_Dto" <- Dto_All_variables_ind2019$"mS#Edo_Dto"
colnames(Dto_All_variables_ind2019_2)
#cambiamos el nombre de las columnas
Dto_All_variables_ind2019_2 <- Dto_All_variables_ind2019_2 %>%
rename(
Estado = "mS#Edo",
Distrito = "mS#Dto",
Tipologia_2017 = "c#Tipologia 2017",
Tiempo_Prom = "C#Tiempo Promedio (Minutos)",
Superficie = "C#Superficie (km2)",
Densidad = "C#Densidad (Ciudadanos en PE por km2)",
Poblacion_menos_18 = "C#Poblacion menos de 18",
Poblacion_mas_60 = "C#Poblacion 60 o mas",
Tasa_crecimiento = "C#Tasa crecimiento PE",
PE_JUL2018 = "C#Padron JUL-18",
PE_FEB2019 = "C#Padron FEB-19",
PE_Loc_Rurales = "D#Padron Localidades Rurales",
Secc_Rurales = "D#Numero secciones rurales",
Participacion_Electoral = "C#Participacion Ciudadana 2018 (presidente)",
Viviendas_Internet = "C#Viviendas con Internet",
Viviendas_Celular = "C#Viviendas con Celular",
Prom_Solic_Equi_MACfijo = "C#Prom Solic-Equip MAC fijo",
Prom_Solic_Equi_MACmovil = "C#Prom Solic-Equip MAC movil",
Dias_disp_CV = "C#Dias prom dispo CV",
Prom_CV_disp = "C#CV disp prom"
)
#se crea un dataframe sin columnas con categorías o texto,
Dto_All_variables_ind2019_3 <- Dto_All_variables_ind2019_2[, -c(1,2,3)]
#cambiamos los rownames por la columna Edo_Dto
Dto_All_variables_ind2019_3 <- Dto_All_variables_ind2019_3 %>%
remove_rownames %>%
column_to_rownames(var="Edo_Dto")
#se crea un dataframe con las variables originales usadas en la tipologia de 2017,
Dto_All_variables_ind2019_orig <- Dto_All_variables_ind2019_3[, -c(4,5,6,7,8,11:17)]
Dto_All_variables_ind2019_orig$"Edo_Dto" <- Dto_All_variables_ind2019_2$"Edo_Dto" #añadimos nuevamente la columna
#cambiamos los rownames por la columna Edo_Dto
Dto_All_variables_ind2019_orig <- Dto_All_variables_ind2019_orig %>%
remove_rownames %>%
column_to_rownames(var="Edo_Dto")
#Resumen estadistico para todas las variables; para la variable continua obtiene medidas descriptivas de los datos
summary(Dto_All_variables_ind2019_3)
res <- cor(Dto_All_variables_ind2019_3)
res <- round(res, 2) #se redondea a dos cifras
View(res)
#p-values
res2 <- rcorr(as.matrix(Dto_All_variables_ind2019_3))
res2
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
#se imprime el dataframe con la comparacion de las correlaciones
res3 <- flattenCorrMatrix(res2$r, res2$P)
View(res3)
#gráfica de correlaciones (solo variables originales)
res <- cor(Dto_All_variables_ind2019_orig)
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
# Insignificant correlations are leaved blank
res2 <- rcorr(as.matrix(Dto_All_variables_ind2019_orig))
corrplot(res2$r, type="upper", order="hclust",
p.mat = res2$P, sig.level = 0.01, insig = "blank")
#display a chart of a correlation matrix
# ver http://www.sthda.com/english/wiki/correlation-matrix-a-quick-start-guide-to-analyze-format-and-visualize-a-correlation-matrix-using-r-software
chart.Correlation(Dto_All_variables_ind2019_3, histogram=TRUE, pch=19)
chart.Correlation(Dto_All_variables_ind2019_orig, histogram=TRUE, pch=19)
#aplicamos PCA con centrado y normalizacion de variables
variables_orig.pca <- prcomp(Dto_All_variables_ind2019_orig, center = TRUE, scale = TRUE)
#resumen de PCA y contribucion de variables a cada PC
summary(variables_orig.pca)
print(variables_orig.pca)
#grafica de varianza explicada
plot(variables_orig.pca, type = "l")
fviz_eig(variables_orig.pca)
plot(variables_orig.pca$x[,1:2])
autoplot(variables_orig.pca,label = TRUE, data =  Dto_All_variables_ind2019_orig , label.size = 3)
fviz_pca_ind(variables_orig.pca,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = FALSE)     # Avoid text overlapping
# Resultados por dto
res.ind <- get_pca_ind(variables_orig.pca)
pca_voriginales <- res.ind$coord          # Coordinates
res.ind$contrib        # Contributions to the PCs
res.ind$cos2           # Quality of representation
#euclidiana
dist_ori_euc <- get_dist(datos_dto_orange2[,c(4,5)],method = "euclidean")
fviz_dist(dist_ori_euc, lab_size = 4, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#manhattan
dist_ori_man <- get_dist(datos_dto_orange2[,c(4,5)],method = "manhattan")
fviz_dist(dist_ori_man, lab_size = 4, gradient = list(low = "#00AFBB", mid = "white", high = "#FC4E07"))
#calculo del numero optimo de clusters con el metodo gap para K-means
fviz_nbclust(datos_dto_orange2[,c(4,5)], kmeans, method = "gap_stat") #señala que con 9 clusters se pueden agrupar los datos
# Visualización de K-means con 2 clusters
set.seed(123)
km.res <- kmeans(datos_dto_orange2[,c(4,5)], 2, nstart = 25)
fviz_cluster(km.res, data = datos_dto_orange2[,c(4,5)],
ellipse.type = "convex",
palette = "jco",
ggtheme = theme_minimal()) +
labs(subtitle = "Método k-means (óptimo)")
# Elbow method
fviz_nbclust(datos_dto_orange2[,c(4,5)], kmeans, method = "wss") +
geom_vline(xintercept = 2, linetype = 2)+
labs(subtitle = "Elbow method")
# Silhouette method
fviz_nbclust(datos_dto_orange2[,c(4,5)], kmeans, method = "silhouette")+
labs(subtitle = "Silhouette method")
